---
import styles from "./style.module.scss";
const { header, x, y, width, height, dragId = 0, hidden = false } = Astro.props;
const draggableId = `draggable-${dragId}`;
const retroWindowHeaderId = `retroWindowHeader-${dragId}`;
const resizeBoxId = `resizeBoxId-${dragId}`;
const mainContentId = `mainContent-${dragId}`;
---

<div class={styles.wrapper}>
    <div
        aria-hidden={hidden}
        id={draggableId}
        class={styles.retroWindow}
        style="width: {width}; min-width: {width}"
        data-x={x}
        data-y={y}
    >
        <div id={retroWindowHeaderId} class={styles.header}>
            <div class={styles.backgroundOfHeader}>
                <div class={styles.decorLine}>
                    <button class={styles.topButton}>
                        <div class={styles.innerButton}></div>
                    </button>
                </div>
            </div>
            <div class={styles.middleHeader}>{header}</div>

            <div class={styles.backgroundOfHeader}>
                <div class={styles.decorLine}>
                    <button class={`${styles.topButton} ${styles.rightButton}`}>
                        <div class={styles.innerButton}></div>
                    </button>
                </div>
            </div>
            <div class={styles.rightHeaderSide}></div>
              <span class={styles.firstBorder}></span>
        <span class={styles.secondBorder}></span>
        </div>
      

        <div id={mainContentId} class={styles.mainContent}>
            <div
                class={styles.body}
                id={resizeBoxId}
                style="visibility: hidden;"
            >
                <slot />
            </div>
        </div>
    </div>
</div>

<script
    define:vars={{
        draggableId,
        mainContentId,
        resizeBoxId,
        retroWindowHeaderId,
    }}
    type="module"
>
    setTimeout(
        () =>
            (document.querySelector(`#${resizeBoxId}`).style =
                "visibility: visible"),
        500,
    );

    // target elements with the "draggable" class
    const position = { x: 0, y: 0 };

    // const retroWindowHeader = document.getElementById(mainContentId);
    const resizeBox = document.getElementById(resizeBoxId);

    debugger;
    const resizeObserver = new ResizeObserver((entries) => {
        for (let entry of entries) {
            // entry.target is the element that was resized
            // entry.contentRect contains the new dimensions (width, height, etc.)
            console.log(`Element ${entry.target.id} was resized to:`);
            console.log(`Width: ${entry.contentRect.width}px`);
            console.log(`Height: ${entry.contentRect.height}px`);
            debugger;
            const retroWindowHeader =
                document.getElementById(retroWindowHeaderId);

            // if (entry.contentRect.width > retroWindowHeader.offsetWidth) {
            retroWindowHeader?.setAttribute(
                "style",
                `width: ${entry.contentRect.width + 19.5}px`,
            );
            // }
            // You can perform actions here based on the new size
        }
    });

    // Start observing the element
    resizeObserver.observe(resizeBox);

    // To stop observing later:
    // resizeObserver.unobserve(myElement);
    // To disconnect all observations:
    // resizeObserver.disconnect();

    debugger;

    document.getElementById(retroWindowHeaderId).addEventListener('mousedown', (e) => {
        const thisWindow = document.getElementById(draggableId);
        const dottedPastWindow = document.createElement('div');
        dottedPastWindow.classList.add('ghost')
        document.querySelector('main').appendChild(dottedPastWindow);
        dottedPastWindow.style.width = `${thisWindow.clientWidth}px`;
        dottedPastWindow.style.height = `${thisWindow.clientHeight}px`;
        dottedPastWindow.style.position = 'absolute';
        dottedPastWindow.style.zIndex = 1;
        debugger;
        dottedPastWindow.style.transform = thisWindow.style.transform;
        dottedPastWindow.style.border = '2px dotted rgb(166,166,166)';
    })

     document.getElementById(retroWindowHeaderId).addEventListener('mouseup', (e) => {
        document.querySelectorAll('.ghost').forEach(item => item.remove());
     });

    interact(`#${draggableId}`).draggable({
        // enable inertial throwing
        // inertia: false,
        allowFrom: `#${retroWindowHeaderId}`,
        // keep the element within the area of it's parent
        modifiers: [
            interact.modifiers.restrictRect({
                restriction: ".mainWindow",
                // endOnly: true,
            }),
        ],
        // autoScroll: true,

        listeners: {
            // call this function on every dragmove event
            move(event) {
                position.x += event.dx;
                position.y += event.dy;

                event.target.style.transform = `translate(${position.x}px, ${position.y}px)`;
            },

            // call this function on every dragend event
            // end(event) {
            //     var textEl = event.target.querySelector("p");

            //     textEl &&
            //         (textEl.textContent =
            //             "moved a distance of " +
            //             Math.sqrt(
            //                 (Math.pow(event.pageX - event.x0, 2) +
            //                     Math.pow(event.pageY - event.y0, 2))
            //             ).toFixed(2) +
            //             "px");
            // },
        },
    });

    function dragMoveListener(event) {
        var target = event.target;
        // keep the dragged position in the data-x/data-y attributes
        var x = (parseFloat(target.getAttribute("data-x")) || 0) + event.dx;
        var y = (parseFloat(target.getAttribute("data-y")) || 0) + event.dy;

        // translate the element
        target.style.transform = "translate(" + x + "px, " + y + "px)";

        // update the posiion attributes
        target.setAttribute("data-x", x);
        target.setAttribute("data-y", y);
    }

    // this function is used later in the resizing and gesture demos
    window.dragMoveListener = dragMoveListener;
</script>
<!-- 
<script define:vars={{ x, y }}>
    function moveBox({ x }, { y }) {
        const box = document.getElementById("draggable");
        if (box) {
            box.style.transform = `translate(${x}px, ${y}px)`;
        }
    }
    // debugger;
    moveBox({ x }, { y });
</script> -->
